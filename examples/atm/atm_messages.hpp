/**
 * @file atm_messages.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2022
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef INCLUDE_ATM_MESSAGES_HPP
#define INCLUDE_ATM_MESSAGES_HPP

#include <string>

#include <util/logger.hpp>
#include <messaging/sender.hpp>

struct withdraw {
  std::string account;
  unsigned amount;
  messaging::sender atm_queue;

  withdraw(std::string const & account_, unsigned amount_, messaging::sender atm_queue_)
  : account(account_), amount(amount_), atm_queue(atm_queue_) {}
};

struct withdraw_ok {};

struct withdraw_denied {};

struct cancel_withdrawal {
  std::string account;
  unsigned amount;

  cancel_withdrawal(std::string const & account_, unsigned amount_) : account(account_), amount(amount_) {}
};

struct withdrawal_processed {
  std::string account;
  unsigned amount;

  withdrawal_processed(std::string const & account_, unsigned amount_) : account(account_), amount(amount_) {}
};

struct card_inserted {
  std::string account;

  explicit card_inserted(std::string const & account_) : account(account_) {}
};

struct digit_pressed {
  char digit;

  explicit digit_pressed(char digit_) : digit(digit_) {}
};

struct clear_last_pressed {};

struct eject_card {};

struct withdraw_pressed {
  unsigned amount;

  explicit withdraw_pressed(unsigned amount_) : amount(amount_) {}
};

struct cancel_pressed {};

struct issue_money {
  unsigned amount;

  issue_money(unsigned amount_) : amount(amount_) {}
};

struct verify_pin {
  std::string account;
  std::string pin;
  messaging::sender atm_queue;

  verify_pin(std::string const & account_, std::string const & pin_, messaging::sender atm_queue_)
  : account(account_), pin(pin_), atm_queue(atm_queue_) {}
};

struct pin_verified {};

struct pin_incorrect {};

struct display_enter_pin {};

struct display_enter_card {};

struct display_insufficient_funds {};

struct display_withdrawal_cancelled {};

struct display_pin_incorrect_message {};

struct display_withdrawal_options {};

struct get_balance {
  std::string account;
  messaging::sender atm_queue;

  get_balance(std::string const & account_, messaging::sender atm_queue_) : account(account_), atm_queue(atm_queue_) {}

  friend std::ostream & operator<<(std::ostream & out, get_balance const & o) {
    return out << ANSI_TOK "{" ANSI_NRM ANSI_LBL "account" ANSI_NRM ANSI_TOK ":" ANSI_NRM << o.account << ANSI_TOK "}" ANSI_NRM;
  }
};

struct balance {
  unsigned amount;

  explicit balance(unsigned amount_) : amount(amount_) {}
};

struct display_balance {
  unsigned amount;

  explicit display_balance(unsigned amount_) : amount(amount_) {}
};

struct balance_pressed {};

#endif /* INCLUDE_ATM_MESSAGES_HPP */
