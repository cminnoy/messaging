/**
 * @file bank_machine.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2022
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include "atm_messages.hpp"
#include <util/logger.hpp>

template <typename Process>
class bank_machine final : public Process {
  using self = bank_machine;
  using sender_type = typename Process::sender_type;
  using dispatcher_type = typename Process::dispatcher_type;

  unsigned balance = 199;

  void dispatch(dispatcher_type & dispatcher) override {
    dispatcher
      .template handle<verify_pin>([&](verify_pin & msg) {
        TRACER_COMPONENT_FUNC(Process::name());
        this->notify_observers(msg);
        if (msg.pin == "1937") {
          msg.atm_queue.send(pin_verified());
          this->notify_observers(pin_verified());
        } else {
          msg.atm_queue.send(pin_incorrect());
          this->notify_observers(pin_incorrect());
        }
      })
      .template handle<withdraw>([&](withdraw & msg) {
        TRACER_COMPONENT_FUNC(Process::name());
        this->notify_observers(msg);
        if (balance >= msg.amount) {
          msg.atm_queue.send(withdraw_ok());
          balance -= msg.amount;
          this->notify_observers(withdraw_ok());
        } else {
          msg.atm_queue.send(withdraw_denied());
          this->notify_observers(withdraw_denied());
        }
      })
      .template handle<get_balance>([&](get_balance const & msg) {
        TRACER_COMPONENT_FUNC(Process::name(), msg);
        msg.atm_queue.send(::balance(balance));
      })
      .template handle<withdrawal_processed>([&](withdrawal_processed &) { TRACER_COMPONENT_FUNC(Process::name()); })
      .template handle<cancel_withdrawal>([&](cancel_withdrawal &) { TRACER_COMPONENT_FUNC(Process::name()); });
  }

public:

  using Process::Process;
};
