/**
 * @file interface_machine.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2022
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <iostream>
#include <functional>
#include <atm_messages.hpp>

template <typename Process>
class interface_machine final : public Process {
  using self = interface_machine;
  using sender_type = typename Process::sender_type;
  using dispatcher_type = typename Process::dispatcher_type;

  template <typename F>
  inline auto bind(F && f) {
    return std::bind(f, this, std::placeholders::_1);
  }

  void handle_issue_money(issue_money const & msg) { std::cout << "Issuing " << msg.amount << std::endl; }

  void handle_display_insufficient_funds(display_insufficient_funds const &) { std::cout << "Insufficient funds" << std::endl; }

  void handle_display_enter_pin(display_enter_pin const &) { std::cout << "Please enter your PIN (0-9)" << std::endl; }

  void handle_display_enter_card(display_enter_card const &) { std::cout << "Please enter your card (i)" << std::endl; }

  void handle_display_balance(display_balance const & msg) { std::cout << "The balance of your account is " << msg.amount << std::endl; }

  void handle_display_withdrawal_options(display_withdrawal_options const &) {
    std::cout << "Withdraw 50? (w)" << std::endl;
    std::cout << "Display Balance? (b)" << std::endl;
    std::cout << "Cancel? (c)" << std::endl;
  }

  void handle_display_withdrawal_cancelled(display_withdrawal_cancelled const &) { std::cout << "Withdrawal cancelled" << std::endl; }

  void handle_display_pin_incorrect_message(display_pin_incorrect_message const &) { std::cout << "PIN incorrect" << std::endl; }

  void handle_eject_card(eject_card const &) { std::cout << "Ejecting card" << std::endl; }

  void dispatch(dispatcher_type & dispatcher) override {
    (dispatcher)
      .template handle<issue_money>(bind(&self::handle_issue_money))
      .template handle<display_insufficient_funds>(bind(&self::handle_display_insufficient_funds))
      .template handle<display_enter_pin>(bind(&self::handle_display_enter_pin))
      .template handle<display_enter_card>(bind(&self::handle_display_enter_card))
      .template handle<display_balance>(bind(&self::handle_display_balance))
      .template handle<display_withdrawal_options>(bind(&self::handle_display_withdrawal_options))
      .template handle<display_withdrawal_cancelled>(bind(&self::handle_display_withdrawal_cancelled))
      .template handle<display_pin_incorrect_message>(bind(&self::handle_display_pin_incorrect_message))
      .template handle<eject_card>(bind(&self::handle_eject_card));
  }

public:

  using Process::Process;
};
