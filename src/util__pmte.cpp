/**
 * @file util__pmte.cpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2023
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <util/pmte.hpp>

namespace util {

namespace pmte {

namespace detail {

std::ostream & base::print(std::ostream & out) const {
  return out << "<unprintable>";
}

std::ostream & operator<<(std::ostream & out, visitor_base const & o) {
  out << "{handlers:{";
  bool comma = false;
  for (auto && elem : o.handlers) {
    if (comma) out << ',';
    comma = true;
    out << *elem;
  }
  out << "},cache_entries:{";
  comma = false;
  for (auto && elem : o.cache_entries) {
    if (comma) out << ',';
    comma = true;
    out << "{hash:" << elem.first << ",handler:" << elem.second << '}';
  }
  out << '}';
  return out;
}

void visitor_base::add_cache_entry(std::size_t const hash_code, pmte_handler * const handler) const {
  auto itt = cache_entries.insert(
    std::lower_bound(begin(cache_entries), end(cache_entries), hash_code,
      [](std::pair<std::size_t, pmte_handler *> const & elem, std::size_t const value) { return elem.first < value; }),
    std::make_pair(hash_code, handler));
  const auto index = std::distance(cache_entries.begin(), itt);
  cache_hash_lookup[calculate_index_in_of_hash_cache(hash_code)] = index;
}

void visitor_base::update_cache_entry(std::size_t const hash_code, pmte_handler * const handler) const noexcept {
  auto location = std::lower_bound(begin(cache_entries), end(cache_entries), hash_code,
    [](std::pair<std::size_t, pmte_handler *> const & elem, std::size_t const value) { return elem.first < value; });
  location->second = handler;
}

void visitor_base::remove_cache_entries(pmte_handler * handler) const {
  auto itt = cache_entries.begin();
  auto end = cache_entries.end();
  while (itt != end) {
    if (itt->second == handler) {
      itt = cache_entries.erase(itt);
      end = cache_entries.end();
      continue;
    }
    ++itt;
  }
}

} // namespace detail

#if __cplusplus >= CPP17_STANDARD && __has_include(<memory_resource>)
void destroy(std::pmr::memory_resource & resource, detail::base * p) {
  if (p) {
    const std::size_t size = p->size();
    p->~base();
    resource.deallocate(p, size);
  }
}
#endif

} // namespace pmte

} // namespace util
