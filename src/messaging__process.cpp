/**
 * @file messaging__process.cpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2023
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <iostream>
#include <messaging/process.hpp>
#include <messaging/broadcasting_process.hpp>

namespace messaging {

process_interface::self & process_interface::on_start(std::function<void()> f) {
  register_on_start_callback(new typename detail::template function_model1<decltype(f)>(std::move(f)));
  return *this;
}

process_interface::self & process_interface::on_start(std::function<void(self &)> f) {
  register_on_start_callback(new typename detail::template function_model2<decltype(f), self>(std::move(f), this));
  return *this;
}

process_interface::self & process_interface::on_finish(std::function<void()> f) {
  register_on_finish_callback(new typename detail::template function_model1<decltype(f)>(std::move(f)));
  return *this;
}

process_interface::self & process_interface::on_finish(std::function<void(self &)> f) {
  register_on_finish_callback(new typename detail::template function_model2<decltype(f), self>(std::move(f), this));
  return *this;
}

process_interface::self & process_interface::on_exception(std::function<void(std::exception_ptr)> f) {
  register_on_exception_callback(new typename detail::template exception_model1<decltype(f)>(std::move(f)));
  return *this;
}

process_interface::self & process_interface::on_exception(std::function<void(self &, std::exception_ptr)> f) {
  register_on_exception_callback(new typename detail::template exception_model2<decltype(f), self>(std::move(f), this));
  return *this;
}

process::self & process::on_start(std::function<void()> f) {
  process_->on_start(std::move(f));
  return *this;
}

process::self & process::on_start(std::function<void(self &)> f) {
  process_->register_on_start_callback(new typename detail::template function_model2<decltype(f), self>(std::move(f), this));
  return *this;
}

process::self & process::on_finish(std::function<void()> f) {
  process_->on_finish(std::move(f));
  return *this;
}

process::self & process::on_finish(std::function<void(self &)> f) {
  process_->register_on_finish_callback(new typename detail::template function_model2<decltype(f), self>(std::move(f), this));
  return *this;
}

process::self & process::on_exception(std::function<void(std::exception_ptr)> f) {
  process_->on_exception(std::move(f));
  return *this;
}

process::self & process::on_exception(std::function<void(self &, std::exception_ptr)> f) {
  process_->register_on_exception_callback(new typename detail::template exception_model2<decltype(f), self>(std::move(f), this));
  return *this;
}

process::self & process::attach_observer(sender observer) {
  auto bp = std::dynamic_pointer_cast<broadcasting_process_interface>(process_);
  if (bp) bp->attach_observer(observer);
  else
    throw std::bad_cast();
  return *this;
}

process::self & process::detach_observer(sender observer, bool notify) {
  auto bp = std::dynamic_pointer_cast<broadcasting_process_interface>(process_);
  if (bp) bp->detach_observer(observer, notify);
  else
    throw std::bad_cast();
  return *this;
}

} // namespace messaging
