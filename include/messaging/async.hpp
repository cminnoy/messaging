/**
 * @file async.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2023
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

#ifndef INCLUDE__MESSAGING__ASYNC_HPP
#define INCLUDE__MESSAGING__ASYNC_HPP

#include <future>
#include <functional>
#include <messaging/sender.hpp>

namespace messaging {

template <typename T>
struct awaitable {
  using type = T;
  using result_type = std::promise<type>;
  result_type result;
};

struct work_package {
  virtual ~work_package() noexcept = default;
  virtual void operator()() = 0;
};

template <typename T>
struct bound_work_package : work_package {
  using type = T;
  std::packaged_task<T()> task;

  bound_work_package() noexcept = default;

  template <typename Func, typename... Args>
  bound_work_package(Func && f, Args &&... args) : task(std::bind(std::forward<Func>(f), std::forward<Args>(args)...)) {}

  bound_work_package(bound_work_package &&) = default;
  bound_work_package(bound_work_package const &) noexcept = delete;
  bound_work_package & operator=(bound_work_package &&) = delete;
  bound_work_package & operator=(bound_work_package const &) = delete;

  void operator()() override final { task(); }
};

/**
 * @brief Send a std::packaged_task to a process to be executed.
 * @return A future to retreive the return value after processing.
 * @warning This works only if the receiving process is a real thread; coroutines will hang as the std::future doesn't yield to other processes
 * @note It is needed to add the specific handler for std::packaged_task<T> to the receiving process.
*/
#if __cplusplus >= CPP20_STANDARD
template <typename ResultT, SenderType<ResultT> SenderT, typename Func, typename... Args>
#else
template <typename ResultT, typename SenderT, typename Func, typename... Args>
#endif
typename SenderT::template future_type<ResultT> async(SenderT sender, Func && f, Args &&... args) {
  bound_work_package<ResultT> package(std::forward<Func>(f), std::forward<Args>(args)...);
  typename SenderT::template future_type<ResultT> fut = package.task.get_future();
  sender.template send<work_package>(std::move(package)).or_throw();
  return fut;
}

/**
 * @brief Send a std::packaged_task to a process to be executed.
 * @return A future to retreive the return value after processing.
 * @warning This works only if the receiving process is a real thread; coroutines will hang as the std::future doesn't yield to other processes
 * @note It is needed to add the specific handler for std::packaged_task<T> to the receiving process.
*/
#if __cplusplus >= CPP20_STANDARD
template <typename ResultT, SenderType<ResultT> SenderT, typename Func, typename... Args>
#else
template <typename ResultT, typename SenderT, typename Func, typename... Args>
#endif
typename SenderT::template future_type<ResultT> async(std::shared_ptr<SenderT> sender, Func && f, Args &&... args) {
  bound_work_package<ResultT> package(std::forward<Func>(f), std::forward<Args>(args)...);
  typename SenderT::template future_type<ResultT> fut = package.task.get_future();
  sender->template send<work_package>(std::move(package)).or_throw();
  return fut;
}

/**
 * @brief Remote procedure call awaiting the result.
 * @tparam MsgT the type of the message to send to the remote process
 * @tparam T the result type; by default taken from MsgT
 * @param sender the sender of the process that will receive the RPC call
 * @param args parameter pack used to construct MsgT
 * @return the future that will hold the result
 */
#if __cplusplus >= CPP20_STANDARD
template <typename MsgT, typename ResultT = typename MsgT::type, SenderType<ResultT> SenderT, typename... Args>
#else
template <typename MsgT, typename ResultT = typename MsgT::type, typename SenderT, typename... Args>
#endif
typename SenderT::template future_type<ResultT> await(SenderT sender, Args &&... args) {
  static_assert(std::is_base_of<messaging::awaitable<ResultT>, MsgT>::value,
    "Message type must inherit from awaitable with the same result type!");
  auto msg = MsgT {std::forward<Args>(args)...};
  typename SenderT::template future_type<ResultT> fut = msg.result.get_future();
  sender.send(std::move(msg)).or_throw();
  return fut;
}

/**
 * @brief Remote procedure call awaiting the result.
 * @tparam MsgT the type of the message to send to the remote process
 * @tparam T the result type; by default taken from MsgT
 * @param sender the sender of the process that will receive the RPC call
 * @param args parameter pack used to construct MsgT
 * @return the future that will hold the result
 */
#if __cplusplus >= CPP20_STANDARD
template <typename MsgT, typename ResultT = typename MsgT::type, SenderType<ResultT> SenderT, typename... Args>
#else
template <typename MsgT, typename ResultT = typename MsgT::type, typename SenderT, typename... Args>
#endif
typename SenderT::template future_type<ResultT> await(std::shared_ptr<SenderT> sender, Args &&... args) {
  static_assert(std::is_base_of<messaging::awaitable<ResultT>, MsgT>::value,
    "Message type must inherit from awaitable with the same result type!");
  auto msg = MsgT {std::forward<Args>(args)...};
  typename SenderT::template future_type<ResultT> fut = msg.result.get_future();
  sender->send(std::move(msg)).or_throw();
  return fut;
}

template <typename Types, typename T = typename Types::process_type, typename... Args>
auto create_worker_process(Args &&... args) {
  auto ptr = std::make_shared<T>(std::forward<Args>(args)...);
  ptr->handle([](work_package & task) { task(); });
  return ptr;
}

} // namespace messaging

#endif /* INCLUDE__MESSAGING__ASYNC_HPP */
