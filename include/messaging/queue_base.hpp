/**
 * @file queue_base.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2022
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

#ifndef INCLUDE__MESSAGING__QUEUE_BASE_HPP
#define INCLUDE__MESSAGING__QUEUE_BASE_HPP

#include <util/attributes.hpp>

static_assert(__cplusplus >= CPP14_STANDARD, "Minimum required standard is C++14.");

#include <cassert>
#include <memory>
#include <algorithm>
#include <type_traits>

#include <util/algorithm.hpp>
#include <util/pmte.hpp>
#include <util/lock_free_queue.hpp>

namespace messaging {

class queue_base {
  public:
    using mutex_type = std::recursive_mutex; // recursive as sender might be same as receiver
    using pointer_type = util::pmte::unique_pmte_value;

  protected:

    virtual void on_push() {}

    util::lock_free_queue<pointer_type> q;
    std::atomic<bool> iswaiting;

  public:

    queue_base() noexcept(std::is_nothrow_constructible<decltype(q), std::size_t>::value) : q() {}
    virtual ~queue_base() noexcept(std::is_nothrow_destructible<decltype(q)>::value) = default;

    void push(util::pmte::unique_pmte_value msg) {
        q.push(std::move(msg));
        on_push();
    }

    NO_DISCARD inline std::size_t size() const noexcept(noexcept(q.size())) { return q.size(); }
    NO_DISCARD inline bool empty() const noexcept(noexcept(q.empty())) { return q.empty(); }
    NO_DISCARD inline bool waiting() const noexcept { return iswaiting; }
#if __cplusplus >= CPP20_STANDARD
    inline void wait() const noexcept { iswaiting.wait(false); }
#endif
};

} // namespace messaging

#endif /* INCLUDE__MESSAGING__QUEUE_BASE_HPP */
