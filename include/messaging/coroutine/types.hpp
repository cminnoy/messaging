/**
 * @file types.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2022
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

#ifndef INCLUDE__MESSAGING__COROUTINE__TYPES_HPP
#define INCLUDE__MESSAGING__COROUTINE__TYPES_HPP

#include <functional>
#include <memory>

#include <messaging/sender.hpp>
#include <messaging/naming.hpp>
#include <messaging/pump.hpp>
#include <messaging/receiver.hpp>
#include <messaging/stop_token.hpp>
#include <messaging/stop_source.hpp>
#include <messaging/dispatcher.hpp>
#include <messaging/template_dispatcher.hpp>
#include <messaging/process.hpp>
#include <messaging/broadcasting_process.hpp>

#include <messaging/coroutine/message_queue.hpp>

#include <boost/coroutine2/all.hpp>

namespace messaging {

namespace coroutine {

namespace detail {

template <typename TaskType, typename FunctionType, typename YieldType>
class function_wrapper {
public:

  using task_type = TaskType;
  using function_type = FunctionType;

private:

  function_type function;
  task_type task;
  stop_state state;
  stop_source source;
  std::atomic<bool> isstarted {false};
  std::atomic<bool> isfinished {false};

  void run(YieldType & yield) {
    isstarted.store(true);
    function(source.get_token(), yield);
    isfinished.store(true);
  }

public:

  function_wrapper(function_type function_)
  : function(std::move(function_)), task(std::bind(&function_wrapper::run, this, std::placeholders::_1)), source(state) {}

  inline bool is_started() const { return isstarted; }

  inline bool is_finished() const { return isfinished; }

  inline void push() { task(); }

  void done() { source.request_stop(); }

  inline stop_source get_stop_source() { return source; }
};

template <typename TaskType, typename ProcessType, typename YieldType, typename SenderType>
class process_wrapper {
public:

  using task_type = TaskType;
  using process_type = ProcessType;
  using sender_type = SenderType;

private:

  std::shared_ptr<process_type> process_ptr;
  task_type task;
  std::atomic<bool> allow_run {false};

  void run(YieldType & yield) { process_ptr->run(yield); }

public:

  template <typename S>
  process_wrapper(S, std::shared_ptr<process_type> process_)
  : process_ptr(std::move(process_)), task(std::bind(&process_wrapper::run, this, std::placeholders::_1)) {}

  void start() { allow_run.store(true); }

  NO_DISCARD bool is_started() const { return process_ptr->is_started(); }
  NO_DISCARD bool is_ready_for_dispatch() const { return process_ptr->is_ready_for_dispatch(); }
  NO_DISCARD bool is_waiting() const { return process_ptr->is_waiting(); }
  NO_DISCARD bool is_finished() const { return process_ptr->is_finished(); }

  inline void push() {
    if (allow_run.load()) task();
  }

  void done() { process_ptr->done(); }

  inline std::shared_ptr<process_type> get() noexcept(true) { return process_ptr; }

  inline const std::shared_ptr<process_type> get() const noexcept(true) { return process_ptr; }
};

} // namespace detail

template <typename TaskType, typename YieldType, typename DictionaryType = process_name_dictionary<>>
struct types {
  using self = types<TaskType, YieldType, DictionaryType>;

  using task_type = TaskType;
  using yield_type = YieldType;
  using dictionary_type = DictionaryType;

  using sender_type = sender_local;
  using dispatcher_type = dispatcher<coroutine::queue, yield_type>;
  using receiver_type = receiver<sender_type, coroutine::queue, yield_type>;

  using function_type = std::function<void(stop_token, yield_type &)>;
  using process_type = process_base<receiver_type, sender_type, dispatcher_type, dictionary_type>;

  using pump_type = messaging::pump<detail::function_wrapper<task_type, function_type, yield_type>,
    detail::process_wrapper<task_type, process_type, yield_type, sender_type>, dictionary_type>;
};

template <typename TaskType, typename YieldType, typename DictionaryType = process_name_dictionary<>>
struct broadcast_types {
  using self = types<TaskType, YieldType, DictionaryType>;

  using task_type = TaskType;
  using yield_type = YieldType;
  using dictionary_type = DictionaryType;

  using sender_type = sender_local;
  using dispatcher_type = dispatcher<coroutine::queue, yield_type>;
  using receiver_type = receiver<sender_type, coroutine::queue, yield_type>;

  using function_type = std::function<void(stop_token, yield_type &)>;
  using process_type = broadcasting_process_base<receiver_type, sender_type, dispatcher_type, dictionary_type>;

  using pump_type = messaging::pump<detail::function_wrapper<task_type, function_type, yield_type>,
    detail::process_wrapper<task_type, process_type, yield_type, sender_type>, dictionary_type>;
};

using boost_coroutine2_types = types<typename boost::coroutines2::coroutine<void>::push_type, typename boost::coroutines2::coroutine<void>::pull_type>;

using boost_coroutine2_types_broadcast = broadcast_types<typename boost::coroutines2::coroutine<void>::push_type,
  typename boost::coroutines2::coroutine<void>::pull_type>;

} // namespace coroutine

} // namespace messaging

#endif /* INCLUDE__MESSAGING__COROUTINE__TYPES_HPP */
