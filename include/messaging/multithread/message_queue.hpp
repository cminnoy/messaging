/**
 * @file message_queue.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2022
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

#ifndef INCLUDE__MESSAGING__MULTITHREAD__MESSAGE_QUEUE_HPP
#define INCLUDE__MESSAGING__MULTITHREAD__MESSAGE_QUEUE_HPP

#include <util/attributes.hpp>

static_assert(__cplusplus >= CPP14_STANDARD, "Minimum required standard is C++14.");

#include <mutex>
#include <memory>
#include <type_traits>
#include <chrono>
#include <condition_variable>

#include <util/attributes.hpp>
#include <util/pmte.hpp>
#include <messaging/queue_base.hpp>
#include <messaging/time.hpp>

namespace messaging {

struct set_heartbeat final {
  time_point start;
  duration interval;
};

struct unset_heartbeat final {};

struct heartbeat_activated final {
  time_point start;
  duration interval;
};

struct heartbeat_deactived final {};

struct heartbeat final {
  time_point now;
};

namespace multithread {

class queue final : public queue_base {
public:
  using time_point = messaging::time_point;
  using duration = messaging::duration;

protected:

  void on_push() override { c.notify_all(); }

private:

  bool handle_heartbeat_messages(util::pmte::pmte_value * ptr) {
    if (util::pmte::is_type_of<messaging::unset_heartbeat>(ptr)) {
      unset_heartbeat();
      return true;
    }
    if (auto cmd = util::pmte::get_if<messaging::set_heartbeat>(ptr)) {
      set_heartbeat(cmd->start, cmd->interval);
      return true;
    }
    return false;
  }

  NO_DISCARD pointer_type with_heartbeat() {
    pointer_type msg;
  next:
    if (q.pop(msg)) {
      if (handle_heartbeat_messages(msg.get())) goto next;
    } else {
      std::unique_lock<mutex_type> lk(m);
      iswaiting.store(true);
      const bool status = c.wait_until(lk, point, [&] { return q.pop(msg); });
      iswaiting.store(false);
      if (status) {
        if (handle_heartbeat_messages(msg.get())) goto next;
      } else {
        msg = util::pmte::make_unique_pmte(heartbeat {point});
        point += interval;
      }
    }
    return msg;
  }

  NO_DISCARD pointer_type without_heartbeat() {
    pointer_type msg;
  next:
    if (not q.pop(msg)) {
      std::unique_lock<mutex_type> lk(m);
      iswaiting.store(true);
      c.wait(lk, [&] { return q.pop(msg); });
      iswaiting.store(false);
    }
    if (handle_heartbeat_messages(msg.get())) goto next;
    return msg;
  }

  std::recursive_mutex m;
  std::condition_variable_any c;
  time_point start;
  duration interval;
  time_point point;
  pointer_type (queue::*process)() = &queue::without_heartbeat;

public:

  using queue_base::queue_base;

  template <typename YieldType>
  NO_DISCARD pointer_type wait_and_pop(YieldType &&) {
    return (this->*process)();
  }

  void set_heartbeat(time_point start_, duration interval_) {
    start = start_;
    interval = interval_;
    point = start_;
    process = &queue::with_heartbeat;
    push(util::pmte::make_unique_pmte(heartbeat_activated {start_, interval_}));
  }

  void unset_heartbeat() {
    process = &queue::without_heartbeat;
    push(util::pmte::make_unique_pmte(heartbeat_deactived {}));
  }
};

} // namespace multithread

} // namespace messaging

#endif /* INCLUDE__MESSAGING__MULTITHREAD__MESSAGE_QUEUE_HPP */
