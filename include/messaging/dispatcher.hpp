/**
 * @file dispatcher.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2022
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

#ifndef INCLUDE__MESSAGING__DISPATCHER_HPP
#define INCLUDE__MESSAGING__DISPATCHER_HPP

#include <util/attributes.hpp>

static_assert(__cplusplus >= CPP14_STANDARD, "Minimum required standard is C++14.");

#include <memory>
#include <forward_list>

#if __cplusplus >= CPP20_STANDARD
#include <concepts>
#endif

#include <util/pmte.hpp>
#include <messaging/close_queue.hpp>
#include <messaging/dispatcher_base.hpp>
#include <messaging/template_dispatcher.hpp>

namespace messaging {

template <typename QueueType, typename YieldType>
class dispatcher final : public dispatcher_base {
public:

#if __cplusplus >= CPP17_STANDARD
  using visitor_type = util::pmte::pmte_visitor<>;
#else
  using visitor_type = util::pmte::pmte_visitor;
#endif

private:

  visitor_type * visitor;
  QueueType * q;
  dispatcher_base * prev;
  YieldType & _yield;
  bool chained;

  dispatcher(dispatcher const &) = delete;
  dispatcher & operator=(dispatcher const &) = delete;

  template <typename Dispatcher, typename Msg, typename Func, typename OtherQueueType, typename OtherYieldType>
#if __cplusplus >= CPP20_STANDARD
  requires std::invocable<Func, Msg> || std::invocable<Func, Msg &>
#endif
  friend class template_dispatcher;

  void wait_and_dispatch() {
    for (;;) {
      if (dispatch(q->wait_and_pop(_yield))) break;
    }
  }

  NO_DISCARD HOT_FUNC bool dispatch(typename QueueType::pointer_type msg) override {
    if (util::pmte::is_type_of<close_queue>(msg)) throw close_queue();
    if (visitor and visitor->operator()(msg)) return true;
    if (prev) return prev->dispatch(std::move(msg));
    return false;
  }

public:

  FORCE_INLINE explicit dispatcher(QueueType * q_, YieldType & yield_) noexcept : q(q_), prev(nullptr), _yield(yield_), chained(false) {}

  FORCE_INLINE dispatcher(dispatcher && other) noexcept
  : visitor(other.visitor), q(other.q), prev(other.prev), _yield(other._yield), chained(other.chained) {
    other.chained = true;
  }

  template <typename PreviousDispatcher, typename Message, typename Func>
#if __cplusplus >= CPP20_STANDARD
  requires std::invocable<Func, Message>
#endif
  FORCE_INLINE dispatcher(template_dispatcher<PreviousDispatcher, Message, Func, QueueType, YieldType> && other)
  : q(other.q), prev(&other), _yield(other._yield), chained(other.chained) {
    static_assert(util::is_invocable<Func, Message &>::value, "Func must accept type Message as its single argument!");
    other.chained = true;
  }

  void unlock() noexcept {
    if (q->empty()) chained = true;
  }

  template <typename Message, typename Func>
  FORCE_INLINE template_dispatcher<dispatcher<QueueType, YieldType>, Message, Func, QueueType, YieldType> handle(Func && f) {
    static_assert(!std::is_reference<Message>::value, "References are not allowed!");
    static_assert(util::is_invocable<Func, Message &>::value, "Func must accept type Message as its single argument!");
    return template_dispatcher<dispatcher<QueueType, YieldType>, Message, Func, QueueType, YieldType>(q, this, std::forward<Func>(f), _yield);
  }

  template <typename Func, typename Message = std::remove_reference_t<typename function_info<std::remove_reference_t<Func>>::first_arg>>
  FORCE_INLINE template_dispatcher<dispatcher<QueueType, YieldType>, Message, Func, QueueType, YieldType> handle(Func && f) {
    using first_arg = typename function_info<typename std::remove_reference_t<Func>>::first_arg;
    using return_type = typename function_info<typename std::remove_reference_t<Func>>::return_type;
    using arg_types = typename function_info<typename std::remove_reference_t<Func>>::arg_types;
    static_assert(std::tuple_size<arg_types>::value == 1, "Handlers must accept exactly one argument!");
    static_assert(std::is_same<return_type, void>::value, "Return type of handler must be void!");
    using T = std::remove_reference_t<first_arg>;
    handle<T>(std::move(f));
  }

  FORCE_INLINE ~dispatcher() noexcept(false) {
    if (!chained) wait_and_dispatch();
  }

  inline void yield() { _yield(); }

  FORCE_INLINE PURE_FUNC dispatcher register_visitor(visitor_type * visitor_) {
    visitor = visitor_;
    return std::move(*this);
  }
};

} // namespace messaging

#endif /* INCLUDE__MESSAGING__DISPATCHER_HPP */
