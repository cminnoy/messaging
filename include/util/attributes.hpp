/**
 * @file attributes.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2022
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

#ifndef INCLUDE__UTIL__ATTRIBUTES_HPP
#define INCLUDE__UTIL__ATTRIBUTES_HPP

// clang-format off

#define CPP98_STANDARD 199711L
#define CPP11_STANDARD 201103L
#define CPP14_STANDARD 201402L
#define CPP17_STANDARD 201703L
#define CPP20_STANDARD 202002L
#define CPP23_STANDARD 202302L


// C++11
#if __cplusplus >= CPP11_STANDARD
#   define NO_RETURN [[noreturn]]
#else
#   define NO_RETURN
#endif


// C++14
#if __cplusplus >= CPP14_STANDARD
#   define DEPRECATED [[deprecated]]
#elif defined(__GNUC__)
#   define DEPRECATED __attribute__((deprecated))
#else
#   define DEPRECATED
#endif


// C++17
#if __cplusplus >= CPP17_STANDARD && __GNUC__ >= 9
#		define MAYBE_UNUSED [[maybe_unused]]
#		define NO_DISCARD [[nodiscard]]
#		define FALL_THROUGH [[fallthrough]]
#       define CPP17_INLINE inline
#else
#   define CPP17_INLINE
#   ifdef __GNUC__
#		define MAYBE_UNUSED __attribute__((unused))
#		define NO_DISCARD __attribute__((warn_unused_result))
#		if __GNUC__ >= 7
#			define FALL_THROUGH __attribute__ ((fallthrough))
#		else
#			define FALL_THROUGH ((void)0)
#		endif /* __GNUC__ >= 7 */
#   elif defined(__clang__)
#		define MAYBE_UNUSED __attribute__((unused))
#		define NO_DISCARD
#		define FALL_THROUGH ((void)0)
#   else
#		define MAYBE_UNUSED
#		define NO_DISCARD
#		define FALL_THROUGH ((void)0)
#   endif
#endif


// C++20
#if __cplusplus >= CPP20_STANDARD
#   if defined(__GNUC__) && !defined(__clang__)
#    define LIKELY [[likely]]
#    define UNLIKELY [[unlikely]]
#   else
#    define LIKELY
#    define UNLIKELY
#   endif
#else
#    define LIKELY
#    define UNLIKELY
#endif


// FORCE_INLINE
#if defined(WITH_GCOV)
#   define FORCE_INLINE
#elif defined(_MSC_VER)
#   define FORCE_INLINE __force_inline
#elif defined(__GNUC__)
#   define FORCE_INLINE  __attribute__((always_inline))
#else
#   define FORCE_INLINE inline
#endif


// NO_INLINE
#if defined(WITH_GCOV)
#   define NO_INLINE
#elif defined(__GNUC__)
#   define NO_INLINE __attribute__((noinline))
#else
#   define NO_INLINE
#endif


// FLATTEN
#if defined(WITH_GCOV)
#   define FLATTEN
#elif defined(__GNUC__)
#   define FLATTEN __attribute__((flatten))
#else
#   define FLATTEN
#endif


// PURE_FUNC
#if defined(WITH_GCOV)
#   define PURE_FUNC
#elif defined(__GNUC__)
#   define PURE_FUNC __attribute__((pure))
#else
#   define PURE_FUNC
#endif


// CONST_FUNC
#if defined(WITH_GCOV)
#   define CONST_FUNC
#elif defined(__GNUC__)
#   define CONST_FUNC __attribute__((const))
#else
#   define CONST_FUNC
#endif


// HOT_FUNC
#if defined(WITH_GCOV)
#   define HOT_FUNC
#elif defined(__GNUC__)
#   define HOT_FUNC __attribute__((hot))
#else
#   define HOT_FUNC
#endif


// LINK_SECTION
#if defined(__GNUC__)
#   define LINK_SECTION(name) __attribute__((section(name)))
#else
#   define LINK_SECTION
#endif


// GTEST helper macros
#if defined(GTESTS_ENABLED) && __has_include("gtest/gtest.h")
#	define GTEST_NON_VIRTUAL virtual
#	define GTEST_VIRTUAL virtual
#else
#	define GTEST_NON_VIRTUAL
#	define GTEST_VIRTUAL virtual
#endif


// C++14 constexpr cases
#if __cplusplus >= CPP14_STANDARD
#   define CPP14_CONSTEXPR constexpr
#else
#   define CPP14_CONSTEXPR
#endif


// C++17 constexpr cases
#if __cplusplus >= CPP17_STANDARD
#   define CPP17_CONSTEXPR constexpr
#else
#   define CPP17_CONSTEXPR
#endif


// C++20 constexpr cases
#if __cplusplus >= CPP20_STANDARD
#   define CPP20_CONSTEXPR constexpr
#else
#   define CPP20_CONSTEXPR
#endif


// C++20 constinit cases
#if __cplusplus >= CPP20_STANDARD
#   define CPP20_CONSTINIT constinit
#   define CPP20_CONSTINIT_OR_CONSTEXPR constinit
#   define CPP20_CONSTEVAL_OR_CONSTEXPR consteval
#elif __cplusplus >= CPP14_STANDARD
#   define CPP20_CONSTINIT
#   define CPP20_CONSTINIT_OR_CONSTEXPR constexpr
#   define CPP20_CONSTEVAL_OR_CONSTEXPR constexpr
#else
#   define CPP20_CONSTINIT
#   define CPP20_CONSTINIT_OR_CONSTEXPR
#   define CPP20_CONSTEVAL_OR_CONSTEXPR
#endif


// 32bit vs 64bit check
#if defined(__LP64__) || defined(_WIN64) || (defined(__x86_64__) && !defined(__ILP32__) ) || defined(_M_X64) || defined(__ia64) || defined (_M_IA64) || defined(__aarch64__) || defined(__powerpc64__)
#define PLATFORM_IS64BIT
#if __cplusplus >= CPP11_STANDARD
static_assert(sizeof(void*) == 8, "64 bit platforms are expected to have 64 bit pointers!");
#endif
enum {
    platform_is64bit = 1,
    platform_is32bit = 0
};
#else
#define PLATFORM_IS32BIT
#if __cplusplus >= CPP11_STANDARD
static_assert(sizeof(void*) == 4, "32 bit platforms are expected to have 32 bit pointers!");
#endif
enum {
    platform_is64bit = 0,
    platform_is32bit = 1
};
#endif

// clang-format on

#endif /* INCLUDE__UTIL__ATTRIBUTES_HPP */
