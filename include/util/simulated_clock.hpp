/**
 * @file simulated_clock.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2022
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

static_assert(__cplusplus >= 201103L, "Minimum required standard is C++11.");

#ifndef UTIL__SIMULATED_CLOCK_HPP
#define UTIL__SIMULATED_CLOCK_HPP

#include <util/shared_library.hpp>
#include <chrono>
#include <ctime>

/**
 * @file simulated_clock.hpp
 * @brief Simulated clock that only progresses on request (nanosecond
 * resolution).
 *
 * For simulation purposes we need a clock that only progresses on request.
 */

namespace util {
/**
 * @brief Simulated clock that only progresses on request (nanosecond resolution).
 */
class DLL_PUBLIC simulated_clock {
public:
  typedef uint64_t rep;
  typedef std::ratio<1l, 1000000000l> period;
  typedef std::chrono::duration<rep, period> duration;
  typedef std::chrono::time_point<simulated_clock, duration> time_point;

  static constexpr bool is_steady = false;
  /**
   * Return simulated time point.
   * @return time point
   */
  static time_point now() noexcept;
  /**
   * Reset clock to Unix epoch time.
   */
  static void reset_to_epoch() noexcept;
  /**
   *  Advance clock with a specific time duration.
   *  @note Negative durations are discouraged.
   */
  static void advance(duration d) noexcept;
  /**
   * Convert a time point to a double in seconds.
   * @param time point
   * @return time in seconds
   */
  static double to_double(time_point) noexcept;
  /**
   * Convert double to a time point.
   * @param time in seconds
   * @return time point representation
   */
  static time_point from_double(double) noexcept;

private:
  simulated_clock() = delete;
  simulated_clock(simulated_clock &&) = delete;
  simulated_clock(const simulated_clock &) = delete;
  ~simulated_clock() = delete;
  simulated_clock & operator=(simulated_clock &&) = delete;
  simulated_clock & operator=(const simulated_clock &) = delete;
};

} // namespace util

#endif /* UTIL__SIMULATED_CLOCK_HPP */
