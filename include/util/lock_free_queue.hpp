/**
 * @file lock_free_queue.hpp
 * @author Chris Minnoy
 * @version 1.0
 * @date 2023
 * 
 * @copyright Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#pragma once

#ifndef INCLUDE__UTIL__LOCK_FREE_QUEUE_HPP
#define INCLUDE__UTIL__LOCK_FREE_QUEUE_HPP

#include <cassert>
#include <atomic>
#include <iostream>

/**
 * @see https://moodycamel.com/blog/2014/a-fast-general-purpose-lock-free-queue-for-c++.htm
 */
// clang-format off
#if __cplusplus >= CPP17_STANDARD
#   if __has_include(<concurrentqueue.h>)
#       include <concurrentqueue.h>
#   else
#       include <concurrentqueue/moodycamel/concurrentqueue.h>
#   endif
#else
#   include <concurrentqueue.h>
#endif
// clang-format on

namespace util {

template <typename T>
class lock_free_queue final {
private:

  moodycamel::ConcurrentQueue<T> q;

public:

  inline std::size_t size() const noexcept { return q.size_approx(); }
  inline bool empty() const noexcept { return size() == 0; }
  inline bool push(T & data) noexcept(std::is_nothrow_move_constructible<T>::value) { return q.enqueue(data); }
  inline bool push(T && data) noexcept(std::is_nothrow_move_constructible<T>::value) { return q.enqueue(std::forward<T>(data)); }
  inline bool pop(T & result) noexcept(std::is_nothrow_destructible<T>::value) { return q.try_dequeue(result); }
};

} // namespace util

#endif /* INCLUDE__UTIL__LOCK_FREE_QUEUE_HPP */
